import logging
from aiogram.types import InlineKeyboardMarkup, Message
from aiogram.exceptions import TelegramBadRequest
from datetime import datetime
from config import (
    LOG_MESSAGE_DELETE_ERROR, LOG_MESSAGE_EDIT_ERROR, LOG_DB_ERROR,
    bot  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –±–æ—Ç–∞ –∏–∑ config.py
)
from database import get_user, can_leave_review_today
from keyboards import get_main_keyboard

async def delete_last_messages(chat_id: int, message_id: int, count: int = 5):
    """
    –£–¥–∞–ª—è–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç–µ.
    
    Args:
        chat_id (int): ID —á–∞—Ç–∞
        message_id (int): ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        count (int): –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    """
    error_count = 0
    current_message_id = message_id
    while error_count < count:
        try:
            await bot.delete_message(chat_id=chat_id, message_id=current_message_id)
            current_message_id -= 1
        except Exception as e:
            logging.warning(LOG_MESSAGE_DELETE_ERROR.format(message_id=current_message_id, error=e))
            current_message_id -= 1
            error_count += 1

async def safe_edit_message(message: Message, text: str, reply_markup: InlineKeyboardMarkup = None) -> None:
    """
    –ë–µ–∑–æ–ø–∞—Å–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫ TelegramBadRequest.
    
    Args:
        message (Message): –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        text (str): –ù–æ–≤—ã–π —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        reply_markup (InlineKeyboardMarkup, optional): –ù–æ–≤–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
    """
    try:
        await message.edit_text(text, reply_markup=reply_markup)
    except TelegramBadRequest as e:
        if "message is not modified" not in str(e):
            # –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –æ—à–∏–±–∫–∞ "—Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–µ–Ω–æ"
            logging.warning(LOG_MESSAGE_EDIT_ERROR.format(error=e))

async def check_user_ban(user_id: int) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.
    
    Args:
        user_id (int): ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
    Returns:
        bool: True –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω, False –µ—Å–ª–∏ –Ω–µ—Ç
    """
    user = await get_user(user_id)
    return user and user[3]  # user[3] - —ç—Ç–æ –ø–æ–ª–µ is_banned

async def check_review_limit(user_id: int, message: Message, keyboard: InlineKeyboardMarkup) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ —Å–µ–≥–æ–¥–Ω—è.
    
    Args:
        user_id (int): ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        message (Message): –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        keyboard (InlineKeyboardMarkup): –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
        
    Returns:
        bool: True –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤, False –µ—Å–ª–∏ –Ω–µ—Ç
    """
    if not await can_leave_review_today(user_id):
        await safe_edit_message(
            message,
            "–í—ã —É–∂–µ –æ—Å—Ç–∞–≤–∏–ª–∏ –æ—Ç–∑—ã–≤ —Å–µ–≥–æ–¥–Ω—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≤—Ç—Ä–∞.",
            reply_markup=keyboard
        )
        return False
    return True

async def handle_text_message(
    message: Message,
    state,
    create_func: callable,
    success_text: str,
    error_text: str,
    user_ratings: dict = None
) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–æ—Ç–∑—ã–≤—ã –∏ –≤–æ–ø—Ä–æ—Å—ã).
    
    Args:
        message (Message): –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        state: –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM
        create_func (callable): –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏
        success_text (str): –¢–µ–∫—Å—Ç —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è
        error_text (str): –¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏
        user_ratings (dict, optional): –°–ª–æ–≤–∞—Ä—å —Å —Ä–µ–π—Ç–∏–Ω–≥–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    """
    user_id = message.from_user.id
    username = message.from_user.username or message.from_user.first_name
    
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    await delete_last_messages(message.chat.id, message.message_id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if await check_user_ban(user_id):
        await message.answer(
            "–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Å—Ç–∞–≤–ª—è—Ç—å –æ—Ç–∑—ã–≤—ã –∏–ª–∏ –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã.",
            reply_markup=get_main_keyboard()
        )
        await state.clear()
        return

    try:
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å
        if user_ratings:
            rating = user_ratings.get(user_id)
            if not rating:
                await message.answer(error_text)
                await state.clear()
                return
            await create_func(user_id, username, rating, message.text)
        else:
            await create_func(user_id, username, message.text)
            
        await message.answer(
            success_text,
            reply_markup=get_main_keyboard()
        )
    except Exception as e:
        logging.error(LOG_DB_ERROR.format(error=e))
        await message.answer(error_text)
    finally:
        await state.clear()
        if user_ratings:
            user_ratings.pop(user_id, None)

def format_datetime(datetime_str: str) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å—Ç—Ä–æ–∫—É —Å –¥–∞—Ç–æ–π –∏ –≤—Ä–µ–º–µ–Ω–µ–º.
    
    Args:
        datetime_str (str): –°—Ç—Ä–æ–∫–∞ —Å –¥–∞—Ç–æ–π –∏ –≤—Ä–µ–º–µ–Ω–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç–µ ISO
        
    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è
    """
    return datetime.fromisoformat(datetime_str).strftime("%d.%m.%Y %H:%M")

def format_review(review: tuple) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ—Ç–∑—ã–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.
    
    Args:
        review (tuple): –î–∞–Ω–Ω—ã–µ –æ—Ç–∑—ã–≤–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        
    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞
    """
    review_id, user_id, username, rating, review_text, admin_response, created_at = review
    
    formatted_text = f"""
üìÖ –î–∞—Ç–∞: {format_datetime(created_at)}
‚≠ê –û—Ü–µ–Ω–∫–∞: {'‚≠ê' * rating}
üìù –û—Ç–∑—ã–≤: {review_text}
"""
    if admin_response:
        formatted_text += f"üí¨ –û—Ç–≤–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {admin_response}\n\n"
    
    return formatted_text

def format_question(question: tuple) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –≤–æ–ø—Ä–æ—Å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.
    
    Args:
        question (tuple): –î–∞–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        
    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞
    """
    question_id, user_id, username, question_text, admin_response, created_at = question
    
    formatted_text = f"""
üìÖ –î–∞—Ç–∞: {format_datetime(created_at)}
‚ùì –í–æ–ø—Ä–æ—Å: {question_text}
"""
    if admin_response:
        formatted_text += f"üí¨ –û—Ç–≤–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {admin_response}\n\n"
    
    return formatted_text

def split_items_into_pages(items: list, format_func: callable) -> list:
    """
    –†–∞–∑–¥–µ–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å —É—á–µ—Ç–æ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–∏–º–≤–æ–ª–æ–≤ –∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤.
    
    Args:
        items (list): –°–ø–∏—Å–æ–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        format_func (callable): –§—É–Ω–∫—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞
        
    Returns:
        list: –°–ø–∏—Å–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü —Å –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏
    """
    pages = []
    current_page = []
    current_page_length = 0
    
    for item in items:
        formatted_item = format_func(item)
        item_length = len(formatted_item)
        
        # –ï—Å–ª–∏ —Ç–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø—É—Å—Ç–∞ –∏–ª–∏ —ç–ª–µ–º–µ–Ω—Ç –ø–æ–º–µ—â–∞–µ—Ç—Å—è –Ω–∞ —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        if not current_page or (current_page_length + item_length <= 4000 and len(current_page) < 10):
            current_page.append(formatted_item)
            current_page_length += item_length
        else:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏ –Ω–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é
            pages.append(current_page)
            current_page = [formatted_item]
            current_page_length = item_length
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Ç—Ä–∞–Ω–∏—Ü—É, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ –ø—É—Å—Ç–∞
    if current_page:
        pages.append(current_page)
    
    return pages 