from aiogram import types
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from src.database import get_questions_by_id, get_user, get_all_reviews, get_all_questions, add_review_response, add_question_response, get_review_by_id
from src.formatting import format_datetime
from src.utils import delete_last_messages
from .admin_utils import show_admin_menu
from .admin_keyboards import (
    get_admin_menu_keyboard, 
    get_admin_questions_keyboard, 
    get_admin_reviews_keyboard,
    get_admin_sort_type_keyboard,
    get_admin_pagination_keyboard,
    get_admin_history_keyboard
)
from .admin_messages import (
    ADMIN_MENU_TEXT, 
    ADMIN_REVIEWS_FILTER_TEXT,
    ADMIN_QUESTIONS_FILTER_TEXT,
    ADMIN_SORT_TEXT,
    ADMIN_HISTORY_REVIEW_TEMPLATE,
    ADMIN_HISTORY_QUESTION_TEMPLATE,
    ADMIN_HISTORY_NO_REVIEWS,
    ADMIN_HISTORY_NO_QUESTIONS,
    ADMIN_HISTORY_STATUS_WITH_ANSWER,
    ADMIN_HISTORY_STATUS_WITHOUT_ANSWER
)
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

class AdminHistoryStates(StatesGroup):
    """
    –ö–ª–∞—Å—Å —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–µ–π –≤ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.
    
    –°–æ—Å—Ç–æ—è–Ω–∏—è:
    - waiting_for_filter_type: –û–∂–∏–¥–∞–Ω–∏–µ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
    - waiting_for_sort_type: –û–∂–∏–¥–∞–Ω–∏–µ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
    - viewing_history: –ü—Ä–æ—Å–º–æ—Ç—Ä –∏—Å—Ç–æ—Ä–∏–∏ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
    - waiting_for_reply: –û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    """
    waiting_for_filter_type = State()
    waiting_for_sort_type = State()
    viewing_history = State()
    waiting_for_reply = State()

async def handle_admin_reviews(callback: types.CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–û—Ç–∑—ã–≤—ã" –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.
    
    Args:
        callback (types.CallbackQuery): –û–±—ä–µ–∫—Ç callback –∑–∞–ø—Ä–æ—Å–∞
        state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM
    """
    await state.set_state(AdminHistoryStates.waiting_for_filter_type)
    await callback.message.edit_text(
        ADMIN_REVIEWS_FILTER_TEXT,
        reply_markup=get_admin_reviews_keyboard()
    )

async def handle_admin_questions(callback: types.CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–í–æ–ø—Ä–æ—Å—ã" –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.
    
    Args:
        callback (types.CallbackQuery): –û–±—ä–µ–∫—Ç callback –∑–∞–ø—Ä–æ—Å–∞
        state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM
    """
    await state.set_state(AdminHistoryStates.waiting_for_filter_type)
    await callback.message.edit_text(
        ADMIN_QUESTIONS_FILTER_TEXT,
        reply_markup=get_admin_questions_keyboard()
    )

async def show_admin_reviews(callback: types.CallbackQuery, state: FSMContext, filter_type: str):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—Ç–∑—ã–≤—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —Å —É—á–µ—Ç–æ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏.
    
    Args:
        callback (types.CallbackQuery): –û–±—ä–µ–∫—Ç callback –∑–∞–ø—Ä–æ—Å–∞
        state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM
        filter_type (str): –¢–∏–ø —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ ('all' –∏–ª–∏ 'without_answers')
    """
    await state.set_state(AdminHistoryStates.waiting_for_sort_type)
    await state.update_data(filter_type=filter_type, history_type="reviews")
    await callback.message.edit_text(
        ADMIN_SORT_TEXT,
        reply_markup=get_admin_sort_type_keyboard("reviews", filter_type)
    )

async def show_admin_questions(callback: types.CallbackQuery, state: FSMContext, filter_type: str):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–æ–ø—Ä–æ—Å—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —Å —É—á–µ—Ç–æ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏.
    
    Args:
        callback (types.CallbackQuery): –û–±—ä–µ–∫—Ç callback –∑–∞–ø—Ä–æ—Å–∞
        state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM
        filter_type (str): –¢–∏–ø —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ ('all' –∏–ª–∏ 'without_answers')
    """
    await state.set_state(AdminHistoryStates.waiting_for_sort_type)
    await state.update_data(filter_type=filter_type, history_type="questions")
    await callback.message.edit_text(
        ADMIN_SORT_TEXT,
        reply_markup=get_admin_sort_type_keyboard("questions", filter_type)
    )

async def display_admin_history(callback: types.CallbackQuery, state: FSMContext, sort_type: str):
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é (–æ—Ç–∑—ã–≤—ã –∏–ª–∏ –≤–æ–ø—Ä–æ—Å—ã) —Å —É—á–µ—Ç–æ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏.
    
    Args:
        callback (types.CallbackQuery): –û–±—ä–µ–∫—Ç callback –∑–∞–ø—Ä–æ—Å–∞
        state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM
        sort_type (str): –¢–∏–ø —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ ('new' –∏–ª–∏ 'old')
    """
    data = await state.get_data()
    filter_type = data.get("filter_type", "all")
    history_type = data.get("history_type", "reviews")
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∏—Å—Ç–æ—Ä–∏–∏
    if history_type == "reviews":
        items = await get_all_reviews(filter_type)
        if not items:
            await callback.message.edit_text(
                ADMIN_HISTORY_NO_REVIEWS,
                reply_markup=get_admin_reviews_keyboard()
            )
            return
    else:
        items = await get_all_questions(filter_type)
        if not items:
            await callback.message.edit_text(
                ADMIN_HISTORY_NO_QUESTIONS,
                reply_markup=get_admin_questions_keyboard()
            )
            return
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —Å —É—á–µ—Ç–æ–º –≤–æ–∑–º–æ–∂–Ω—ã—Ö None –∑–Ω–∞—á–µ–Ω–∏–π
    def sort_key(item):
        # –î–ª—è –æ—Ç–∑—ã–≤–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º created_at (–∏–Ω–¥–µ–∫—Å 6), –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤ - created_at (–∏–Ω–¥–µ–∫—Å 5)
        date = item[6] if history_type == "reviews" else item[5]
        if date is None:
            return ""  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ None –∑–Ω–∞—á–µ–Ω–∏–π –≤ –∫–æ–Ω–µ—Ü
        return date
    
    if sort_type == "old":
        items = sorted(items, key=sort_key)
    else:
        items = sorted(items, key=sort_key, reverse=True)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(items=items, current_page=0)
    await state.set_state(AdminHistoryStates.viewing_history)
    
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    await show_admin_history_page(callback, state)

async def show_admin_history_page(callback: types.CallbackQuery, state: FSMContext):
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏—Å—Ç–æ—Ä–∏–∏ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π.
    
    Args:
        callback (types.CallbackQuery): –û–±—ä–µ–∫—Ç callback –∑–∞–ø—Ä–æ—Å–∞
        state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM
    """
    data = await state.get_data()
    items = data.get("items", [])
    current_page = data.get("current_page", 0)
    history_type = data.get("history_type", "reviews")
    filter_type = data.get("filter_type", "all")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    user_data = await get_user(callback.from_user.id)
    admin_level = user_data[2]  # –ü–æ–ª—É—á–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    
    # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ 1 —ç–ª–µ–º–µ–Ω—Ç—É
    items_per_page = 1
    total_pages = len(items)
    
    if total_pages == 0:
        if history_type == "reviews":
            await callback.message.edit_text(
                ADMIN_HISTORY_NO_REVIEWS,
                reply_markup=get_admin_reviews_keyboard()
            )
        else:
            await callback.message.edit_text(
                ADMIN_HISTORY_NO_QUESTIONS,
                reply_markup=get_admin_questions_keyboard()
            )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    if current_page < 0:
        current_page = 0
    elif current_page >= total_pages:
        current_page = total_pages - 1
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —ç–ª–µ–º–µ–Ω—Ç
    current_item = items[current_page]
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    if history_type == "reviews":
        status = ADMIN_HISTORY_STATUS_WITH_ANSWER if current_item[5] else ADMIN_HISTORY_STATUS_WITHOUT_ANSWER
        review_text = f"\n\nüí≠ –û—Ç–∑—ã–≤: {current_item[4]}" if current_item[4] else ""
        admin_response = f"\n\nüí¨ –û—Ç–≤–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {current_item[5]}" if current_item[5] else ""
        
        text = ADMIN_HISTORY_REVIEW_TEMPLATE.format(
            review_id=current_item[0],
            username=current_item[2],
            status=status,
            date=format_datetime(current_item[6]),
            rating="‚≠ê" * current_item[3],
            review_text=review_text,
            admin_response=admin_response
        )
    else:
        status = ADMIN_HISTORY_STATUS_WITH_ANSWER if current_item[4] else ADMIN_HISTORY_STATUS_WITHOUT_ANSWER
        admin_response = f"\n\nüí¨ –û—Ç–≤–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {current_item[4]}" if current_item[4] else ""
        
        text = ADMIN_HISTORY_QUESTION_TEMPLATE.format(
            question_id=current_item[0],
            username=current_item[2],
            status=status,
            date=format_datetime(current_item[5]),
            question_text=current_item[3],
            admin_response=admin_response
        )
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
    keyboard = get_admin_history_keyboard(
        current_page=current_page,
        total_pages=total_pages,
        history_type=history_type,
        filter_type=filter_type,
        has_admin_response=current_item[5] if history_type == "reviews" else current_item[4],
        admin_level=admin_level,
        item_id=current_item[0]
    )
    
    await callback.message.edit_text(text, reply_markup=keyboard)

async def handle_admin_reply(callback: types.CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–û—Ç–≤–µ—Ç–∏—Ç—å" –¥–ª—è –æ—Ç–∑—ã–≤–∞ –∏–ª–∏ –≤–æ–ø—Ä–æ—Å–∞.
    
    Args:
        callback (types.CallbackQuery): –û–±—ä–µ–∫—Ç callback –∑–∞–ø—Ä–æ—Å–∞
        state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Ä–æ–≤–µ–Ω—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    admin_level = (await get_user(callback.from_user.id))[2]
    if admin_level < 2:
        await show_admin_menu(callback.message)
        return

    # –ü–æ–ª—É—á–∞–µ–º ID —ç–ª–µ–º–µ–Ω—Ç–∞ –∏ —Ç–∏–ø –∏—Å—Ç–æ—Ä–∏–∏ –∏–∑ callback_data
    parts = callback.data.split("_")
    item_id = int(parts[2])
    history_type = parts[3]
    
    print(f"DATA: {parts}\n"
          f"item_id: {item_id}\n"
          f"history_type: {history_type}\n")

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç–∑—ã–≤–∞/–≤–æ–ø—Ä–æ—Å–∞ –∏–∑ –±–∞–∑—ã
    if history_type == "reviews":
        item = await get_review_by_id(item_id)
        if not item:
            await callback.answer("–û—Ç–∑—ã–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
            return
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—Ç–≤–µ—Ç–∞
        if item[5]:
            await callback.answer("–ù–∞ —ç—Ç–æ—Ç –æ—Ç–∑—ã–≤ —É–∂–µ –µ—Å—Ç—å –æ—Ç–≤–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!", show_alert=True)
            return
            
        status = ADMIN_HISTORY_STATUS_WITH_ANSWER if item[5] else ADMIN_HISTORY_STATUS_WITHOUT_ANSWER
        admin_response = f"\n\nüí¨ –û—Ç–≤–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {item[5]}" if item[5] else ""
        text = ADMIN_HISTORY_REVIEW_TEMPLATE.format(
            review_id=item[0],
            username=item[2],
            status=status,
            date=format_datetime(item[6]),
            rating="‚≠ê" * item[3],
            review_text=f"\n\nüí≠ –û—Ç–∑—ã–≤: {item[4]}" if item[4] else "",
            admin_response=admin_response
        )
    else:
        item = await get_questions_by_id(item_id)
        print(f"ITEM: {item}\n")
        if not item:
            await callback.answer("–í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
            return
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—Ç–≤–µ—Ç–∞
        if item[4]:
            await callback.answer("–ù–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å —É–∂–µ –µ—Å—Ç—å –æ—Ç–≤–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!", show_alert=True)
            return
            
        status = ADMIN_HISTORY_STATUS_WITH_ANSWER if item[4] else ADMIN_HISTORY_STATUS_WITHOUT_ANSWER
        admin_response = f"\n\nüí¨ –û—Ç–≤–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {item[4]}" if item[4] else ""
        text = ADMIN_HISTORY_QUESTION_TEMPLATE.format(
            question_id=item[0],
            username=item[2], 
            status=status,
            date=format_datetime(item[5]),
            question_text=item[3],
            admin_response=admin_response
        )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(
        reply_item_id=item_id,
        reply_history_type=history_type
    )
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞
    await state.set_state(AdminHistoryStates.waiting_for_reply)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—Ç–∑—ã–≤–æ–º/–≤–æ–ø—Ä–æ—Å–æ–º –∏ –ø—Ä–æ—Å—å–±–æ–π –≤–≤–µ—Å—Ç–∏ –æ—Ç–≤–µ—Ç
    await callback.message.edit_text(
        f"{text}\n\n‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
            InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_cancel_reply")
        ]])
    )

async def handle_admin_reply_text(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ–≥–æ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.
    
    Args:
        message (types.Message): –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ—Ç–≤–µ—Ç–æ–º
        state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM
    """
    # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    item_id = data.get("reply_item_id")
    history_type = data.get("reply_history_type")

    print(f"DATA: {data}\n"
          f"item_id: {item_id}\n"
          f"history_type: {history_type}\n")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    if history_type == "reviews":
        await add_review_response(item_id, message.text)
    else:
        await add_question_response(item_id, message.text)
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É –∏—Å—Ç–æ—Ä–∏–∏
    await state.set_state(AdminHistoryStates.viewing_history)
    
    await delete_last_messages(message.chat.id, message.message_id)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏
    await message.answer(
        "‚úÖ –û—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
            InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"back_to_main")
        ]])
    )

async def handle_admin_cancel_reply(callback: types.CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–º–µ–Ω—É –æ—Ç–≤–µ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.
    
    Args:
        callback (types.CallbackQuery): –û–±—ä–µ–∫—Ç callback –∑–∞–ø—Ä–æ—Å–∞
        state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM
    """
    # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø –∏—Å—Ç–æ—Ä–∏–∏ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    history_type = data.get("reply_history_type")
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É –∏—Å—Ç–æ—Ä–∏–∏
    await state.set_state(AdminHistoryStates.viewing_history)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç–º–µ–Ω–µ
    await callback.message.edit_text(
        "‚ùå –û—Ç–≤–µ—Ç –æ—Ç–º–µ–Ω–µ–Ω.",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
            InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"back_to_main")
        ]])
    )


